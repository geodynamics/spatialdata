// =================================================================================================
// This code is part of SpatialData, developed through the Computational Infrastructure
// for Geodynamics (https://github.com/geodynamics/spatialdata).
//
// Copyright (c) 2010-2025, University of California, Davis and the SpatialData Development Team.
// All rights reserved.
//
// See https://mit-license.org/ and LICENSE.md and for license information.
// =================================================================================================
#pragma once

#include <assert.h> // USES assert()

// Get value to nondimensionalize length scale in meters (SI units).
inline
double
spatialdata::units::Nondimensional::getLengthScale(void) const {
    return _length;
}


// Get value to nondimensionalize pressure scale in Pascals (SI units).
inline
double
spatialdata::units::Nondimensional::getPressureScale(void) const {
    return _pressure;
}


// Get value to nondimensionalize time scale in seconds (SI units).
inline
double
spatialdata::units::Nondimensional::getTimeScale(void) const {
    return _time;
}


// Get value to nondimensionalize density scale in kg/m^3 (SI units).
inline
double
spatialdata::units::Nondimensional::getDensityScale(void) const {
    return _density;
}


// Get value to nondimensionalize temperature scale in Kelvin (SI units).
inline
double
spatialdata::units::Nondimensional::getTemperatureScale(void) const {
    return _temperature;
}


// Make value dimensionless.
inline
double
spatialdata::units::Nondimensional::nondimensionalize(const double value,
                                                      const double scale) const {
    return value / scale;
}


// Make values dimensionless.
inline
void
spatialdata::units::Nondimensional::nondimensionalize(double* const values,
                                                      const size_t nvalues,
                                                      const double scale) const { // nondimensionalize
    assert( (0 < nvalues && values) ||
            (0 == nvalues && !values) );

    for (size_t i = 0; i < nvalues; ++i) {
        values[i] /= scale;
    }
} // nondimensionalize


// Make values dimensionless.
inline
void
spatialdata::units::Nondimensional::nondimensionalize(float* const values,
                                                      const size_t nvalues,
                                                      const double scale) const { // nondimensionalize
    assert( (0 < nvalues && values) ||
            (0 == nvalues && !values) );

    for (size_t i = 0; i < nvalues; ++i) {
        values[i] /= scale;
    }
} // nondimensionalize


// Make value dimensionless.
inline
double
spatialdata::units::Nondimensional::dimensionalize(const double value,
                                                   const double scale) const {
    return value * scale;
}


// Make value dimensionless.
inline
void
spatialdata::units::Nondimensional::dimensionalize(double* const values,
                                                   const size_t nvalues,
                                                   const double scale) const { // dimensionalize
    assert( (0 < nvalues && values) ||
            (0 == nvalues && !values) );

    for (size_t i = 0; i < nvalues; ++i) {
        values[i] *= scale;
    }
} // dimensionalize


// Make value dimensionless.
inline
void
spatialdata::units::Nondimensional::dimensionalize(float* const values,
                                                   const size_t nvalues,
                                                   const double scale) const { // dimensionalize
    assert( (0 < nvalues && values) ||
            (0 == nvalues && !values) );

    for (size_t i = 0; i < nvalues; ++i) {
        values[i] *= scale;
    }
} // dimensionalize


// End of file
