# =================================================================================================
# This code is part of SpatialData, developed through the Computational Infrastructure
# for Geodynamics (https://github.com/geodynamics/spatialdata).
#
# Copyright (c) 2010-2025, University of California, Davis and the SpatialData Development Team.
# All rights reserved.
#
# See https://mit-license.org/ and LICENSE.md and for license information. 
# =================================================================================================

import unittest

import numpy
from spatialdata.testing.TestCases import make_suite


# ----------------------------------------------------------------------------------------------------------------------
class TestSCECCVMH(unittest.TestCase):

    def setUp(self):
        from spatialdata.spatialdb.SCECCVMH import SCECCVMH
        db = SCECCVMH()
        db.inventory.dataDir = "@SCECCVMH_DATADIR@"
        db._configure()
        self._db = db

    def test_query(self):
        locs = numpy.array([[-118.520000,  34.120000,  -1400.00],
                            [-116.400000,  32.340000,  -1000.00]],
                           numpy.float64)
        from spatialdata.geocoords.CSGeo import CSGeo
        cs = CSGeo()
        cs.inventory.specification = "+proj=lonlat +datum=NAD27 +ellipsoid=clrk66"
        cs._configure()
        queryVals = ["topo-elev", "moho-depth", "density"]
        dataE = numpy.array([[489.975189, -31178.105469,   2660.851074],
                             [801.209961, -34526.414062,   3022.192708]],
                            numpy.float64)
        errE = [0, 0]

        db = self._db
        db.open()
        db.setQueryValues(queryVals)
        data = numpy.zeros(dataE.shape, dtype=numpy.float64)
        err = []
        nlocs = locs.shape[0]
        for i in xrange(nlocs):
            e = db.query(data[i, :], locs[i, :], cs)
            err.append(e)
        db.close()

        self.assertEqual(len(errE), len(err))
        for vE, v in zip(errE, err):
            self.assertEqual(vE, v)

        self.assertEqual(len(dataE.shape), len(data.shape))
        for dE, d in zip(dataE.shape, data.shape):
            self.assertEqual(dE, d)
        for vE, v in zip(numpy.reshape(dataE, -1), numpy.reshape(data, -1)):
            self.assertAlmostEqual(vE, v, 6)
        return

    def test_querySquash(self):
        locs = numpy.array([[-118.520000,  34.120000,  -1400.00 - 489.975189],
                            [-116.400000,  32.340000,  -1000.00 - 801.209961]],
                           numpy.float64)
        from spatialdata.geocoords.CSGeo import CSGeo
        cs = CSGeo()
        cs.inventory.specification = "+proj=lonlat +datum=NAD27 +ellipsoid=clrk66"
        cs._configure()
        queryVals = ["topo-elev", "moho-depth", "density"]
        dataE = numpy.array([[489.975189, -31178.105469,   2660.851074],
                             [801.209961, -34526.414062,   3022.192708]],
                            numpy.float64)
        errE = [0, 0]

        db = self._db
        db.open()
        db.setQueryValues(queryVals)
        from pythia.pyre.units.length import km
        squashLimit = -2.5 * km
        db.setSquashFlag(True, squashLimit.value)
        data = numpy.zeros(dataE.shape, dtype=numpy.float64)
        err = []
        nlocs = locs.shape[0]
        for i in xrange(nlocs):
            e = db.query(data[i, :], locs[i, :], cs)
            err.append(e)
        db.close()

        self.assertEqual(len(errE), len(err))
        for vE, v in zip(errE, err):
            self.assertEqual(vE, v)

        self.assertEqual(len(dataE.shape), len(data.shape))
        for dE, d in zip(dataE.shape, data.shape):
            self.assertEqual(dE, d)
        for vE, v in zip(numpy.reshape(dataE, -1), numpy.reshape(data, -1)):
            self.assertAlmostEqual(vE, v, 6)


def load_tests(loader, tests, pattern):
    TEST_CLASSES = [TestSCECCVMH]
    return make_suite(TEST_CLASSES, loader)


if __name__ == "__main__":
    unittest.main(verbosity=2)


# End of file
