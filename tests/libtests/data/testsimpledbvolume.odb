#!/usr/bin/env python
#
# ======================================================================
#
#                           Brad T. Aagaard
#                        U.S. Geological Survey
#
# {LicenseText}
#
# ======================================================================
#
## @file tests/libtests/data/testsimpledbvolume.odb
## @brief Python data generator for tests of C++ SimpleDB using
## TestSimpleDBVolume.

def query_data():
  """Factory method for facility query_data."""
  return VolumeData()

from SimpleDBQueryData import SimpleDBQueryData

# VolumeData class
class VolumeData(SimpleDBQueryData):
  """Python data generator for tests of C++ SimpleDBQuery using
  TestSimpleDBVolume."""

  def initialize(self):
    """Initialize."""

    self._names = [ "One", "Two" ]
    self._tdata = [ {'r': 1.0, 's':-1.0, 't':-1.0, 'one': 0.1, 'two': 1.1},
                    {'r':-1.0, 's':-1.0, 't':-1.0, 'one': 0.3, 'two': 3.3},
                    {'r': 1.0, 's': 1.0, 't':-1.0, 'one': 0.2, 'two': 2.2},
                    {'r':-1.0, 's': 1.0, 't':-1.0, 'one': 0.1, 'two': 1.1},
                    {'r': 1.0, 's':-1.0, 't': 1.0, 'one': 0.4, 'two': 4.6},
                    {'r':-1.0, 's':-1.0, 't': 1.0, 'one': 0.3, 'two': 3.2},
                    {'r': 1.0, 's': 1.0, 't': 1.0, 'one': 0.7, 'two': 5.2},
                    {'r':-1.0, 's': 1.0, 't': 1.0, 'one': 0.5, 'two': 4.6}]
    self._topology = "spatial::SimpleDB::VOLUME"

    self._qtdata = [ {'r': 0.9, 's':-0.8, 't':-0.9, 'ni': 0,
                      'wts': [{'i': 0, 'w': 0.80},
                              {'i': 2, 'w': 0.10},
                              {'i': 4, 'w': 0.05},
                              {'i': 1, 'w': 0.05}] },
                     {'r': -0.8, 's': 0.1, 't': 0.9, 'ni': 7,
                      'wts': [{'i': 7, 'w': 0.40},
                              {'i': 5, 'w': 0.45},
                              {'i': 6, 'w': 0.10},
                              {'i': 3, 'w': 0.05}] },
                     {'r': 0.6, 's': 0.8, 't': 0.6, 'ni': 6,
                      'wts': [{'i': 6, 'w': 0.50},
                              {'i': 2, 'w': 0.20},
                              {'i': 7, 'w': 0.20},
                              {'i': 4, 'w': 0.10}] },
                     {'r':-0.3, 's':-0.7, 't':-0.1, 'ni': 1,
                      'wts': [{'i': 1, 'w': 0.05},
                              {'i': 5, 'w': 0.45},
                              {'i': 0, 'w': 0.35},
                              {'i': 3, 'w': 0.15}]} ]
    self._numLocs = len(self._tdata)
    self._numVals = len(self._names)
    self._numQueries = len(self._qtdata)

    self._compute()
    return

  def _compute(self):
    """Compute locations of points and values."""
    o = [3.4, 9.5, 8.7]
    sqrt5 = 5**0.5
    sqrt21 = 21**0.5
    sqrt105 = 105**0.5
    a = [2.0/sqrt5, 0, 1.0/sqrt5]
    b = [1.0/sqrt21, 4.0/sqrt21, -2.0/sqrt21]
    c = [-4.0/sqrt105, 5.0/sqrt105, 8.0/sqrt105]
    self._data = []
    for loc in self._tdata:
      r = loc['r']
      s = loc['s']
      t = loc['t']
      x = o[0] + a[0]*r + b[0]*s + c[0]*t
      y = o[1] + a[1]*r + b[1]*s + c[1]*t
      z = o[2] + a[2]*r + b[2]*s + c[2]*t
      self._data += [x, y, z, loc['one'], loc['two']]
    
    self._qldata = []
    self._qndata = []
    for qloc in self._qtdata:
      r = qloc['r']
      s = qloc['s']
      t = qloc['t']
      x = o[0] + a[0]*r + b[0]*s + c[0]*t
      y = o[1] + a[1]*r + b[1]*s + c[1]*t
      z = o[2] + a[2]*r + b[2]*s + c[2]*t
      v1 = 0
      v2 = 0
      for wt in qloc['wts']:
        v1 += self._tdata[wt['i']]['one']*wt['w']
        v2 += self._tdata[wt['i']]['two']*wt['w']
      self._qldata += [x, y, z, v1, v2]
      v1 = self._tdata[qloc['ni']]['one']
      v2 = self._tdata[qloc['ni']]['two']
      self._qndata += [x, y, z, v1, v2]    
    return

  def __init__(self):
    """Constructor."""
    SimpleDBQueryData.__init__(self, name="volumedata")
    return

# version
__id__ = "$Id: testsimpledbvolume.odb,v 1.1.1.1 2005/03/17 22:18:34 baagaard Exp $"

# End of file 
